{"remainingRequest":"D:\\MicroHR\\vuehr\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\MicroHR\\vuehr\\src\\views\\emp\\EmpBasic.vue?vue&type=template&id=42af3467&scoped=true&","dependencies":[{"path":"D:\\MicroHR\\vuehr\\src\\views\\emp\\EmpBasic.vue","mtime":1608733911719},{"path":"D:\\MicroHR\\vuehr\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MicroHR\\vuehr\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\MicroHR\\vuehr\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MicroHR\\vuehr\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}